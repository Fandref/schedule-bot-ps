<?php


class RegistrationAction extends Action implements ActionInterface{
    public function handler(){
        $form = $this->load->component('form/form', [$this->id]);
        if(!$form->isInit()){
            $form->init([
                'role'
            ]);
            $this->bot->sendMessage($this->id, [
                'text' => "–•—Ç–æ –≤–∏?",
                'reply_markup' => [
                    'inline_keyboard' => [
                        [
                            ['text' => '–°—Ç—É–¥–µ–Ω—Ç', 'callback_data' => 'role_student']
                        ],
                        [
                            ['text' => '–í–∏–∫–ª–∞–¥–∞—á', 'callback_data' => 'role_teacher']
                        ]
                    ]
                ]
            
            ]);
            $this->bot->history_command->set('registration');
        }
        else if(!$form->role){
            $callback = $this->bot->getCallback();
           
            if($callback){
                $message_id = $callback['message']['message_id'];
                $chat_id = $callback['message']['chat']['id'];

                $role = $callback['data'];
                if($role == 'role_student'){
        
                    $form->role = 2;
                    $this->bot->editMessage($chat_id, $message_id, 
                    [
                        'text' => "–•—Ç–æ –≤–∏?\n<code>----------------------</code>\n<code>–í–∏ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏: –°—Ç—É–¥–µ–Ω—Ç</code>",
                        'reply_markup' => null
                        ]
                    );
                    
                    $this->bot->sendMessage($this->id, [
                        'text' => "–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Å–≤–æ—î—ó –≥—Ä—É–ø–∏",
                        'allow_sending_without_reply' => true
                    ]);
                    $form->initField('group');
                }
                else if($role == 'role_teacher'){
                    $form->role = 1;

                    $this->bot->editMessage($chat_id, $message_id, 
                    [
                        'text' => "–•—Ç–æ –≤–∏?\n<code>------------------------</code>\n<code>–í–∏ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏: –í–∏–∫–ª–∞–¥–∞—á</code>
                        ",
                        'reply_markup' => null
                        ]
                    );
                    
                    $this->bot->sendMessage($this->id, [
                        'text' => "–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –ø–æ–≤–Ω–µ —ñ–º'—è",
                        'allow_sending_without_reply' => true
                    ]);
                    $form->initField('name');
                }

                
                }
            }
            else if($form->role){
                $this->storage->addUser($this->id, $form->role);
                if($form->isFieldInit('name') && !isset($form->name)){
                    $teacher_name = $this->bot->getMessage()['text'] ?? $this->bot->getCallback()['data'];
                    $is_teacher = $this->advisor->verifyTeacher($teacher_name);
                    if($is_teacher && !is_array($is_teacher)){
                        $this->bot->sendAnswer($this->id, [
                            'text' => "–î—è–∫—É—é –≤–∞–º, {$teacher_name}. \n–Ø –Ω–µ –º–∞—é –±—ñ–ª—å—à–µ –¥–æ –≤–∞—Å –∑–∞–ø–∏—Ç–∞–Ω—å üòá \n–í—ñ–¥–∫—Ä–∏–≤–∞–π—Ç–µ –º–µ–Ω—é —ñ –∫–æ—Ä–∏—Å—Ç—É–π—Ç–µ—Å—å –º–æ—ó–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ ü§ì",
                            'reply_markup' => self::main_menu
                        ]);
                        $this->storage->setNameTeacher($this->id, $teacher_name);
                        $is_callback = $this->bot->getCallback();
                        if($is_callback){
                            $message_id = $is_callback['message']['message_id'];
                
                        }
                        $form->deleteForm();
                    }
                    else if(!$is_teacher){
                        $this->bot->sendMessage($this->id, [
                            'text' => "–¢–∞–∫–æ–≥–æ –≤–∏–∫–ª–∞–¥–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é ü§ì"
                        ]);
                    }
                    else if(is_array($is_teacher)){
                        $prepareted_teachers = $this->formatingOtherVariable($is_teacher); 
                        $this->bot->sendMessage($this->id, [
                            'text' => "–ú–æ–∂–ª–∏–≤–æ –≤–∏ —Ö–æ—Ç—ñ–ª–∏ –≤–≤–µ—Å—Ç–∏, —â–æ—Å—å —ñ–∑ —Ü—å–æ–≥–æ? üßê",
                            'reply_markup' => [
                                'inline_keyboard' => $prepareted_teachers
                            ]
                
                        ]);
                    }
                }
                else if($form->isFieldInit('group') && !isset($form->group)){
                    $group = $this->bot->getMessage()['text'] ?? $this->bot->getCallback()['data'];
            
                    $is_group = $this->advisor->verifyGroup($group);
                    if($is_group && !is_array($is_group)){
                        $this->bot->sendAnswer($this->id, [
                            'text' => "–í—Å–µ, —è –Ω–µ –º–∞—é –±—ñ–ª—å—à–µ –¥–æ —Ç–µ–±–µ –∑–∞–ø–∏—Ç–∞–Ω—å üòá \n–í—ñ–¥–∫—Ä–∏–≤–∞–π –º–µ–Ω—é —ñ –∫–æ—Ä–∏—Å—Ç—É–π—Å—è –º–æ—ó–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ üòè",
                            'reply_markup' => self::main_menu
                        ]);
                        $this->storage->setGroup($this->id, $group);
                        $is_callback = $this->bot->getCallback();
                        if($is_callback){
                            $message_id = $is_callback['message']['message_id'];
                            $chat_id = $this->id;
                
                            $this->bot->deleteMessage($chat_id, $message_id);
                
                        }
                        $form->deleteForm();
                    }
                    else if(!$is_group){
                        $this->bot->sendMessage($this->id, [
                            'text' => "–¢–∞–∫–æ—ó –≥—Ä—É–ø–∏ –Ω–µ–º–∞—î. –ü–µ—Ä–µ–≤—ñ—Ä—å —Å–≤–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é ü§ì"
                        ]);
                    }
                    else if(is_array($is_group)){
                        $prepareted_groups = $this->formatingOtherVariable($is_group); 
                        $this->bot->sendMessage($this->id, [
                            'text' => "–ú–æ–∂–ª–∏–≤–æ —Ç–∏ —Ö–æ—Ç—ñ–≤ –≤–≤–µ—Å—Ç–∏, —â–æ—Å—å —ñ–∑ —Ü—å–æ–≥–æ? üßê",
                            'reply_markup' => [
                                'inline_keyboard' => $prepareted_groups
                            ]
                
                        ]);
                    }
                }
            }
        


    }
}